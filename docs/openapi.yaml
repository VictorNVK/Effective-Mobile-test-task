openapi: 3.0.3
info:
  title: Bank Cards Admin API
  version: 1.0.0
  description: >
    Admin endpoints for managing bank cards. Security is disabled in the current
    environment; once authentication is in place, update the `security` section accordingly.
servers:
  - url: http://localhost:8901/api/v3
    description: Local Spring Boot backend
  - url: http://127.0.0.1:8901/api/v3
    description: Localhost alias (for Swagger/IDEA)
  - url: http://localhost:63342
    description: IntelliJ internal server (read-only, do not use)
x-localhost-example: http://localhost:8901/api/v3
security:
  - bearerAuth: []
tags:
  - name: Admin
    description: Administrative operations over cards
  - name: Auth
    description: Аутентификация и управление JWT токенами

paths:
  /auth/login:
    post:
      tags:
        - Auth
      operationId: login
      summary: Войти в систему и получить пару JWT токенов
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequestDto'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDto'
        '400':
          description: Невалидные данные запроса
        '401':
          description: Неверные учетные данные

  /auth/refresh:
    post:
      tags:
        - Auth
      operationId: refreshTokens
      summary: Обновить пару JWT токенов по refresh-токену
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequestDto'
      responses:
        '200':
          description: Новая пара токенов выдана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDto'
        '400':
          description: Невалидные данные или истекший refresh-токен

  /admin/card/create:
    post:
      tags:
        - Admin
      operationId: createCard
      summary: Создать карту для клиента
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreateRequestDto'
      responses:
        '201':
          description: Карта успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardCreateResponseDto'
        '204':
          description: Клиент с указанным `ownerId` не найден
        '409':
          description: Карта с таким PAN уже существует (коллизия генератора)
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Внутренняя ошибка сервиса
          content:
            text/plain:
              schema:
                type: string

  /admin/card/{cardId}:
    get:
      tags:
        - Admin
      operationId: getCardById
      summary: Получить карту по идентификатору
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CardIdPathParam'
      responses:
        '200':
          description: Карта найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseDto'
        '404':
          description: Карта не найдена
        '500':
          description: Внутренняя ошибка сервиса
          content:
            text/plain:
              schema:
                type: string

    delete:
      tags:
        - Admin
      operationId: deleteCard
      summary: Удалить карту
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CardIdPathParam'
      responses:
        '200':
          description: Карта успешно удалена
        '404':
          description: Карта не найдена
        '500':
          description: Внутренняя ошибка сервиса
          content:
            text/plain:
              schema:
                type: string

  /admin/card/update/{cardId}:
    patch:
      tags:
        - Admin
      operationId: updateCard
      summary: Обновить атрибуты карты
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CardIdPathParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardUpdateRequestDto'
      responses:
        '200':
          description: Карта успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseDto'
        '400':
          description: Невалидные данные запроса
        '404':
          description: Карта не найдена
        '500':
          description: Внутренняя ошибка сервиса
          content:
            text/plain:
              schema:
                type: string

  /admin/cards:
    get:
      tags:
        - Admin
      operationId: getAllCards
      summary: Получить страницу карт
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Номер страницы (начиная с 0). На одной странице по 10 карт.
      responses:
        '200':
          description: Список карт (не более 10 записей на странице)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardResponseDto'
        '500':
          description: Внутренняя ошибка сервиса
          content:
            text/plain:
              schema:
                type: string

  /admin/user:
    post:
      tags:
        - Admin
      operationId: addUser
      summary: Создать нового пользователя
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequestDto'
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetResponseDto'
        '400':
          description: Невалидные данные запроса
        '409':
          description: Пользователь с таким логином уже существует
        '500':
          description: Внутренняя ошибка сервиса
          content:
            text/plain:
              schema:
                type: string

  /admin/user/{id}:
    get:
      tags:
        - Admin
      operationId: getUser
      summary: Получить пользователя по идентификатору
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserIdPathParam'
      responses:
        '200':
          description: Пользователь найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetResponseDto'
        '404':
          description: Пользователь не найден
        '500':
          description: Внутренняя ошибка сервиса
          content:
            text/plain:
              schema:
                type: string

    delete:
      tags:
        - Admin
      operationId: deleteUser
      summary: Удалить пользователя
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserIdPathParam'
      responses:
        '200':
          description: Пользователь удалён
        '404':
          description: Пользователь не найден
        '400':
          description: Некорректный запрос
        '500':
          description: Внутренняя ошибка сервиса
          content:
            text/plain:
              schema:
                type: string

    patch:
      tags:
        - Admin
      operationId: updateUser
      summary: Обновить пользователя
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserIdPathParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequestDto'
      responses:
        '200':
          description: Пользователь обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetResponseDto'
        '400':
          description: Невалидные данные запроса
        '404':
          description: Пользователь не найден
        '409':
          description: Пользователь с таким логином уже существует
        '500':
          description: Внутренняя ошибка сервиса
          content:
            text/plain:
              schema:
                type: string

  /admin/users/{page}:
    get:
      tags:
        - Admin
      operationId: getUsers
      summary: Получить страницу пользователей
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Номер страницы (начиная с 0). На одной странице по 10 пользователей.
      responses:
        '200':
          description: Список пользователей (не более 10 записей на странице)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGetResponseDto'
        '500':
          description: Внутренняя ошибка сервиса
          content:
            text/plain:
              schema:
                type: string

  /admin/card/{cardId}/block:
    patch:
      tags:
        - Admin
      operationId: blockCard
      summary: Заблокировать карту
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CardIdPathParam'
      responses:
        '200':
          description: Статус карты обновлён на BLOCKED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseDto'
        '404':
          description: Карта не найдена
        '500':
          description: Внутренняя ошибка сервиса
          content:
            text/plain:
              schema:
                type: string

  /admin/card/{cardId}/activate:
    patch:
      tags:
        - Admin
      operationId: activateCard
      summary: Активировать карту
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CardIdPathParam'
      responses:
        '200':
          description: Статус карты обновлён на ACTIVE
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseDto'
        '404':
          description: Карта не найдена
        '500':
          description: Внутренняя ошибка сервиса
          content:
            text/plain:
              schema:
                type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    CardIdPathParam:
      name: cardId
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: Идентификатор карты
      example: 1

    UserIdPathParam:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Идентификатор пользователя
      example: "550e8400-e29b-41d4-a716-446655440000"

  schemas:
    CardCreateRequestDto:
      type: object
      required:
        - ownerId
      properties:
        ownerId:
          type: string
          format: uuid
          description: Идентификатор клиента, которому будет принадлежать карта
          example: "550e8400-e29b-41d4-a716-446655440000"

    CardCreateResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор созданной карты
          example: 1
        ownerId:
          type: string
          format: uuid
          description: Идентификатор владельца карты
          example: "550e8400-e29b-41d4-a716-446655440000"
        maskedPan:
          type: string
          description: Маскированный номер карты
          example: "**** **** **** 1234"
        expiryMonth:
          type: integer
          description: Месяц окончания срока действия
          example: 12
        expiryYear:
          type: integer
          description: Год окончания срока действия
          example: 2027
        plainPan:
          type: string
          description: Сырый PAN, возвращается только при создании карты
          example: "5483450012345678"

    CardResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор карты
          example: 1
        ownerId:
          type: string
          format: uuid
          description: Идентификатор владельца карты
          example: "550e8400-e29b-41d4-a716-446655440000"
        status:
          type: string
          enum: [ACTIVE, BLOCKED, EXPIRED]
          description: Текущий статус карты
          example: BLOCKED
        maskedPan:
          type: string
          description: Маскированный номер карты
          example: "**** **** **** 1234"
        expiryMonth:
          type: integer
          description: Месяц окончания срока действия
          example: 12
        expiryYear:
          type: integer
          description: Год окончания срока действия
          example: 2027

    CardUpdateRequestDto:
      type: object
      properties:
        ownerId:
          type: string
          format: uuid
          nullable: true
          description: Новый идентификатор владельца (опционально)
        expiryMonth:
          type: integer
          minimum: 1
          maximum: 12
          description: Новый месяц окончания срока действия (1-12)
          example: 12
        expiryYear:
          type: integer
          minimum: 1
          description: Новый год окончания срока действия (не может быть в прошлом)
          example: 2028
        status:
          type: string
          nullable: true
          enum: [ACTIVE, BLOCKED, EXPIRED]
          description: Новый статус карты
    AuthRequestDto:
      type: object
      required:
        - login
        - password
        - role
      properties:
        login:
          type: string
          description: Логин пользователя
          example: admin@example.com
        password:
          type: string
          format: password
          description: Пароль пользователя
          example: P@ssw0rd
        role:
          $ref: '#/components/schemas/RoleType'

    RefreshTokenRequestDto:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Refresh токен, выданный ранее методом /auth/login

    AuthResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          description: Access токен для авторизации
        accessTokenExpiresIn:
          type: integer
          format: int64
          description: Время жизни access токена в секундах
        refreshToken:
          type: string
          description: Refresh токен для получения новой пары токенов
        refreshTokenExpiresIn:
          type: integer
          format: int64
          description: Время жизни refresh токена в секундах
        tokenType:
          type: string
          description: Тип токена (обычно Bearer)
          example: Bearer

    RoleType:
      type: string
      enum: [ADMIN, USER]
      description: Роль, с которой производится аутентификация

    CreateUserRequestDto:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          description: Логин пользователя
          example: user@example.com
        password:
          type: string
          format: password
          description: Пароль пользователя
          example: StrongPassword123

    UserGetResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Идентификатор пользователя
          example: "550e8400-e29b-41d4-a716-446655440000"
        login:
          type: string
          description: Логин пользователя
          example: user@example.com
